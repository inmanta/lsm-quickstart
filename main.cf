"""
    :copyright: 2020 Inmanta
    :contact: code@inmanta.com
    :license: Inmanta EULA
"""

import lsm
import lsm::fsm
import vyos
import net

entity VlanAssignment extends lsm::ServiceEntity:
    std::ipv_any_address router_ip
    string router_ip__description="The IP address of the vyos router that should be configured."

    string interface_name
    string interface_name__description="The name of the interface that should be connected on the given VLAN."

    std::ipv_any_interface address
    string address__description="The IP-address/netmask to assign to the given VLAN interface."
    lsm::attribute_modifier address__modifier="rw+"

    net::vlan_id vlan_id
    string vlan_id__description="The VLAN ID to assign to the given interface."
    lsm::attribute_modifier vlan_id__modifier="rw+"
end

index VlanAssignment(router_ip, interface_name, vlan_id)

implement VlanAssignment using vlanAssignment
implement VlanAssignment using parents

implementation vlanAssignment for VlanAssignment:
    host = vyos::Host(name="vyos", user="vyos", password="vyos", port=22, ip=self.router_ip)
    interface = vyos::Interface(name=self.interface_name, host=host)
    v_interface = vyos::Vif(vlan=self.vlan_id, address=self.address, dhcp=false, parent=interface, purge_on_delete=false)
    self.resources = [interface.config]
end


entity Wrapper extends lsm::ServiceEntity:
	int value = 0
	lsm::attribute_modifier value__modifier = "rw+"
end


Wrapper.vlan [1] lsm::__service__ VlanAssignment


entity MultiWrapper extends lsm::ServiceEntity:
end


MultiWrapper.vlan [0:] lsm::__service__, lsm::__rwplus__ VlanAssignment


binding = lsm::ServiceEntityBinding(
    service_entity="__config__::VlanAssignment",
    lifecycle=lsm::fsm::simple,
    service_entity_name="vlan-assignment",
)

for assignment in lsm::all(binding):
    VlanAssignment(
        instance_id=assignment["id"],
        router_ip=assignment["attributes"]["router_ip"],
        interface_name=assignment["attributes"]["interface_name"],
        address=assignment["attributes"]["address"],
        vlan_id=assignment["attributes"]["vlan_id"],
        entity_binding=binding,
    )
end


implementation wrapper for Wrapper:
	self.resources += self.vlan.resources
end


implementation multi_wrapper for MultiWrapper:
	for vlan in self.vlan:
		self.resources += vlan.resources
	end
end


wrapper_binding = lsm::ServiceEntityBinding(
    service_entity="__config__::Wrapper",
    lifecycle=lsm::fsm::simple,
    service_entity_name="wrapper",
)

for assignment in lsm::all(wrapper_binding):
    Wrapper(
	entity_binding=wrapper_binding,
        instance_id=assignment["id"],
	vlan=VlanAssignment[instance_id=assignment["attributes"]["vlan"]],
	value="value" in assignment["attributes"] ? assignment["attributes"]["value"] : 0,
    )
end


multi_wrapper_binding = lsm::ServiceEntityBinding(
    service_entity="__config__::MultiWrapper",
    lifecycle=lsm::fsm::simple,
    service_entity_name="multi-wrapper",
)

#for assignment in lsm::all(multi_wrapper_binding):
#    MultiWrapper(
#       entity_binding=wrapper_binding,
#       instance_id=assignment["id"],
#	vlan=VlanAssignment[instance_id=assignment["attributes"]["vlan"]]
#    )
#end

index lsm::ServiceEntity(instance_id)


implement Wrapper using parents, wrapper
implement MultiWrapper using parents, multi_wrapper
